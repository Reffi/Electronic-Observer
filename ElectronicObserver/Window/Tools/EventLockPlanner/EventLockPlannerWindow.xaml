<common:WindowBase
	x:Class="ElectronicObserver.Window.Tools.EventLockPlanner.EventLockPlannerWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:common="clr-namespace:ElectronicObserver.Common"
	xmlns:controls="clr-namespace:ColorPickerLib.Controls;assembly=ColorPickerLib"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:dd="urn:gong-wpf-dragdrop"
	xmlns:local="clr-namespace:ElectronicObserver.Window.Tools.EventLockPlanner"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:ui="http://schemas.modernwpf.com/2019"
	Title="{Binding EventLockPlanner.Title}"
	Width="900"
	Height="600"
	d:DataContext="{d:DesignInstance local:EventLockPlannerViewModel}"
	ui:WindowHelper.UseModernWindowStyle="True"
	x:TypeArguments="local:EventLockPlannerViewModel"
	mc:Ignorable="d"
	>
	<Window.Resources>
		<local:EventLockPlannerBindingProxy x:Key="Proxy" DataContext="{Binding}" />

		<Style BasedOn="{StaticResource DefaultMenuItemStyle}" TargetType="MenuItem">
			<Setter Property="FontFamily" Value="{Binding DataContext.Font, Source={StaticResource Proxy}}" />
			<Setter Property="FontSize" Value="{Binding DataContext.FontSize, Source={StaticResource Proxy}}" />
			<Setter Property="Foreground" Value="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}" />
		</Style>

		<Style BasedOn="{StaticResource DefaultButtonStyle}" TargetType="Button">
			<Setter Property="FontFamily" Value="{Binding DataContext.Font, Source={StaticResource Proxy}}" />
			<Setter Property="FontSize" Value="{Binding DataContext.FontSize, Source={StaticResource Proxy}}" />
			<Setter Property="Foreground" Value="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}" />
		</Style>

		<Style BasedOn="{StaticResource DefaultTextBoxStyle}" TargetType="TextBox">
			<Setter Property="FontFamily" Value="{Binding DataContext.Font, Source={StaticResource Proxy}}" />
			<Setter Property="FontSize" Value="{Binding DataContext.FontSize, Source={StaticResource Proxy}}" />
			<Setter Property="Foreground" Value="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}" />
		</Style>

		<Style BasedOn="{StaticResource DefaultComboBoxStyle}" TargetType="ComboBox">
			<Setter Property="FontFamily" Value="{Binding DataContext.Font, Source={StaticResource Proxy}}" />
			<Setter Property="FontSize" Value="{Binding DataContext.FontSize, Source={StaticResource Proxy}}" />
			<Setter Property="Foreground" Value="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}" />
		</Style>

		<DataTemplate x:Key="LockGroupTemplate" DataType="local:LockGroupViewModel">
			<Grid Margin="1">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition />
				</Grid.RowDefinitions>

				<Border Grid.Row="0" Background="{Binding Background}">
					<StackPanel>
						<controls:ColorPicker
							ColorMode="ColorCanvas"
							DisplayColorAndName="True"
							SelectedColor="{Binding Color}"
							>
							<controls:ColorPicker.Resources>
								<SolidColorBrush x:Key="PopupBackgroundBrush" Color="{DynamicResource SystemAltHighColor}" />
							</controls:ColorPicker.Resources>
						</controls:ColorPicker>

						<TextBox Margin="2" Text="{Binding Name}" />
					</StackPanel>
				</Border>

				<Border
					Grid.Row="1"
					Padding="4"
					BorderBrush="{Binding Background}"
					BorderThickness="1"
					>
					<ItemsControl
						MinWidth="50"
						MinHeight="50"
						dd:DragDrop.DropHandler="{Binding}"
						dd:DragDrop.IsDragSource="True"
						dd:DragDrop.IsDropTarget="True"
						dd:DragDrop.UseDefaultDragAdorner="True"
						Background="Transparent"
						ItemsSource="{Binding Ships}"
						>
						<ItemsControl.ItemsPanel>
							<ItemsPanelTemplate>
								<WrapPanel Orientation="Vertical" />
							</ItemsPanelTemplate>
						</ItemsControl.ItemsPanel>

						<ItemsControl.ItemTemplate>
							<DataTemplate>
								<TextBlock Margin="2 0" Text="{Binding Display}" />
							</DataTemplate>
						</ItemsControl.ItemTemplate>
					</ItemsControl>
				</Border>
			</Grid>

		</DataTemplate>
	</Window.Resources>

	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition MinHeight="50" />
			<RowDefinition Height="Auto" />
			<RowDefinition />
		</Grid.RowDefinitions>

		<Menu Grid.Row="0">
			<MenuItem Header="{Binding EventLockPlanner.File}">
				<MenuItem Command="{Binding CopyLocksToClipboardCommand}" Header="{Binding EventLockPlanner.CopyToClipboard}" />
				<MenuItem Command="{Binding LoadLocksFromClipboardCommand}" Header="{Binding EventLockPlanner.LoadFromClipboard}" />
				<Separator />
				<MenuItem Command="{Binding LoadEventLocksCommand}" Header="{Binding EventLockPlanner.LoadEventLocks}" />
			</MenuItem>
			<MenuItem Header="{Binding EventLockPlanner.View}">
				<MenuItem
					Header="{Binding EventLockPlanner.ShowFinishedPhases}"
					IsCheckable="True"
					IsChecked="{Binding ShowFinishedPhases}"
					/>
			</MenuItem>
		</Menu>

		<Grid
			Grid.Row="1"
			VerticalAlignment="Stretch"
			IsSharedSizeScope="True"
			>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition />
			</Grid.RowDefinitions>

			<StackPanel Grid.Row="0" Orientation="Horizontal">
				<Button
					Margin="2 0"
					Command="{Binding AddPhaseCommand}"
					Content="{Binding EventLockPlanner.AddPhase}"
					/>
				<Button
					Margin="2 0"
					Command="{Binding RemovePhaseCommand}"
					Content="{Binding EventLockPlanner.RemovePhase}"
					/>
			</StackPanel>

			<Border Grid.Row="1" Margin="4">
				<ScrollViewer HorizontalScrollBarVisibility="Auto">
					<ItemsControl ItemsSource="{Binding EventPhases}">
						<ItemsControl.ItemsPanel>
							<ItemsPanelTemplate>
								<StackPanel Orientation="Horizontal" />
							</ItemsPanelTemplate>
						</ItemsControl.ItemsPanel>

						<ItemsControl.ItemTemplate>
							<DataTemplate>
								<Border
									Margin="1"
									Padding="2"
									BorderThickness="1"
									>
									<Border.Style>
										<Style TargetType="Border">
											<Setter Property="Visibility" Value="Visible" />
											<Setter Property="BorderBrush" Value="Gray" />
											<Style.Triggers>
												<DataTrigger Binding="{Binding IsFinished}" Value="True">
													<Setter Property="Background" Value="#33008000" />
												</DataTrigger>

												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition Binding="{Binding IsFinished}" Value="True" />
														<Condition Binding="{Binding DataContext.ShowFinishedPhases, Source={StaticResource Proxy}}" Value="False" />
													</MultiDataTrigger.Conditions>
													<Setter Property="Visibility" Value="Collapsed" />
												</MultiDataTrigger>
											</Style.Triggers>
										</Style>
									</Border.Style>

									<Grid Background="Transparent">
										<Grid.Resources>
											<local:EventPhaseBindingProxy x:Key="PhaseProxy" DataContext="{Binding}" />
										</Grid.Resources>

										<Grid.ContextMenu>
											<ContextMenu>
												<MenuItem Header="{Binding DataContext.EventLockPlanner.AssignLock, Source={StaticResource Proxy}}" ItemsSource="{Binding RemainingGroups}">
													<MenuItem.ItemTemplate>
														<DataTemplate>
															<MenuItem
																Command="{Binding DataContext.AddLockToPhaseCommand, Source={StaticResource PhaseProxy}}"
																CommandParameter="{Binding}"
																Header="{Binding Name}"
																/>
														</DataTemplate>
													</MenuItem.ItemTemplate>
												</MenuItem>
												<MenuItem
													Command="{Binding DataContext.DeletePhaseCommand, Source={StaticResource Proxy}}"
													CommandParameter="{Binding}"
													Header="{Binding DataContext.EventLockPlanner.RemovePhase, Source={StaticResource Proxy}}"
													/>
												<MenuItem
													Header="{Binding DataContext.EventLockPlanner.IsFinished, Source={StaticResource Proxy}}"
													IsCheckable="True"
													IsChecked="{Binding IsFinished}"
													/>
											</ContextMenu>
										</Grid.ContextMenu>

										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" SharedSizeGroup="PhaseLockGroups" />
											<RowDefinition Height="Auto" />
											<RowDefinition />
										</Grid.RowDefinitions>

										<ItemsControl
											Grid.Row="0"
											VerticalAlignment="Bottom"
											ItemsSource="{Binding PhaseLockGroups}"
											>
											<ItemsControl.ItemTemplate>
												<DataTemplate>
													<TextBlock
														Padding="2"
														Background="{Binding Background}"
														Text="{Binding Name}"
														>
														<TextBlock.ContextMenu>
															<ContextMenu>
																<MenuItem
																	Command="{Binding DataContext.RemoveLockFromPhaseCommand, Source={StaticResource PhaseProxy}}"
																	CommandParameter="{Binding}"
																	Header="{Binding DataContext.EventLockPlanner.Remove, Source={StaticResource PhaseProxy}}"
																	/>
															</ContextMenu>
														</TextBlock.ContextMenu>
													</TextBlock>
												</DataTemplate>
											</ItemsControl.ItemTemplate>
										</ItemsControl>

										<TextBox Grid.Row="1" Text="{Binding Name}" />

										<Border Grid.Row="2" Padding="4">
											<ItemsControl
												MinWidth="50"
												MinHeight="50"
												dd:DragDrop.DropHandler="{Binding}"
												dd:DragDrop.IsDragSource="True"
												dd:DragDrop.IsDropTarget="True"
												dd:DragDrop.UseDefaultDragAdorner="True"
												Background="Transparent"
												ItemsSource="{Binding Ships}"
												>
												<ItemsControl.ItemTemplate>
													<DataTemplate>
														<StackPanel Orientation="Horizontal">
															<TextBlock Background="Transparent" Text="{Binding Display}">
																<TextBlock.Style>
																	<Style TargetType="TextBlock">
																		<Style.Triggers>
																			<DataTrigger Binding="{Binding MatchesPhaseLock}" Value="False">
																				<Setter Property="Foreground" Value="Red" />
																			</DataTrigger>
																		</Style.Triggers>
																	</Style>
																</TextBlock.Style>
																<TextBlock.ContextMenu>
																	<ContextMenu>
																		<MenuItem
																			Command="{Binding DataContext.RemoveShipLockCommand, Source={StaticResource PhaseProxy}}"
																			CommandParameter="{Binding}"
																			Header="{Binding DataContext.EventLockPlanner.Remove, Source={StaticResource PhaseProxy}}"
																			/>
																	</ContextMenu>
																</TextBlock.ContextMenu>
															</TextBlock>
														</StackPanel>
													</DataTemplate>
												</ItemsControl.ItemTemplate>
											</ItemsControl>
										</Border>
									</Grid>

								</Border>
							</DataTemplate>
						</ItemsControl.ItemTemplate>
					</ItemsControl>
				</ScrollViewer>
			</Border>
		</Grid>

		<GridSplitter
			Grid.Row="2"
			Height="3"
			HorizontalAlignment="Stretch"
			ResizeDirection="Rows"
			/>

		<Grid Grid.Row="3" VerticalAlignment="Stretch">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition />
			</Grid.RowDefinitions>

			<StackPanel Grid.Row="0" Orientation="Horizontal">
				<Button
					Margin="2 0"
					Command="{Binding AddLockCommand}"
					Content="{Binding EventLockPlanner.AddLock}"
					/>
				<Button
					Margin="2 0"
					Command="{Binding RemoveLockCommand}"
					Content="{Binding EventLockPlanner.RemoveLock}"
					/>
			</StackPanel>

			<Border Grid.Row="1" Margin="4">
				<ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
					<ItemsControl ItemTemplate="{StaticResource LockGroupTemplate}" ItemsSource="{Binding LockGroups}">
						<ItemsControl.ItemsPanel>
							<ItemsPanelTemplate>
								<StackPanel Orientation="Horizontal" />
							</ItemsPanelTemplate>
						</ItemsControl.ItemsPanel>
					</ItemsControl>
				</ScrollViewer>
			</Border>
		</Grid>

		<GridSplitter
			Grid.Row="4"
			Height="3"
			HorizontalAlignment="Stretch"
			ResizeDirection="Rows"
			/>

		<Grid Grid.Row="5">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition />
			</Grid.RowDefinitions>

			<Grid Grid.Row="0" DataContext="{Binding NoLockGroup.Filter}">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition />
				</Grid.RowDefinitions>

				<ItemsControl Grid.Row="0" ItemsSource="{Binding TypeFilters}">
					<ItemsControl.ItemsPanel>
						<ItemsPanelTemplate>
							<WrapPanel Orientation="Horizontal" />
						</ItemsPanelTemplate>
					</ItemsControl.ItemsPanel>
					<ItemsControl.ItemTemplate>
						<DataTemplate>
							<CheckBox
								MinWidth="0"
								Margin="2 0"
								Content="{Binding Display}"
								IsChecked="{Binding IsChecked}"
								/>
						</DataTemplate>
					</ItemsControl.ItemTemplate>
				</ItemsControl>

				<WrapPanel Grid.Row="1" Orientation="Horizontal">
					<local:NumberRange
						Maximum="{Binding AswMax}"
						Minimum="{Binding AswMin}"
						Text="{Binding ShipFilter.ASW}"
						/>

					<local:NumberRange
						Maximum="{Binding LuckMax}"
						Minimum="{Binding LuckMin}"
						Text="{Binding ShipFilter.Luck}"
						/>

					<CheckBox
						MinWidth="0"
						Margin="2 0"
						Content="{Binding ShipFilter.Daihatsu}"
						IsChecked="{Binding CanEquipDaihatsu}"
						/>

					<CheckBox
						MinWidth="0"
						Margin="2 0"
						Content="{Binding ShipFilter.Tank}"
						IsChecked="{Binding CanEquipTank}"
						/>

					<CheckBox
						MinWidth="0"
						Margin="2 0"
						Content="{Binding ShipFilter.Expansion}"
						IsChecked="{Binding HasExpansionSlot}"
						/>
				</WrapPanel>
			</Grid>

			<DataGrid
				Grid.Row="1"
				dd:DragDrop.DropHandler="{Binding}"
				dd:DragDrop.IsDragSource="True"
				dd:DragDrop.IsDropTarget="True"
				dd:DragDrop.UseDefaultDragAdorner="True"
				AutoGenerateColumns="False"
				DataContext="{Binding NoLockGroup}"
				HeadersVisibility="Column"
				IsReadOnly="True"
				ItemsSource="{Binding Ships}"
				SelectionMode="Single"
				>
				<DataGrid.ColumnHeaderStyle>
					<Style BasedOn="{StaticResource DefaultDataGridColumnHeaderStyle}" TargetType="{x:Type DataGridColumnHeader}">
						<Setter Property="Foreground" Value="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}" />
						<Setter Property="FontFamily" Value="{Binding DataContext.Font, Source={StaticResource Proxy}}" />
						<Setter Property="FontSize" Value="{Binding DataContext.FontSize, Source={StaticResource Proxy}}" />
						<Setter Property="Padding" Value="5 0" />
						<Setter Property="Template" Value="{StaticResource DataGridColumnHeaderTemplate}" />
						<Style.Triggers>
							<Trigger Property="SortDirection" Value="{x:Null}">
								<Setter Property="Padding" Value="5 0" />
							</Trigger>
						</Style.Triggers>
					</Style>
				</DataGrid.ColumnHeaderStyle>

				<ui:DataGridHelper.CheckBoxColumnElementStyle>
					<Style BasedOn="{StaticResource DataGridReadOnlyCheckBoxStyle}" TargetType="CheckBox">
						<Setter Property="Margin" Value="0" />
						<Setter Property="Padding" Value="0" />
						<Setter Property="HorizontalAlignment" Value="Center" />
					</Style>
				</ui:DataGridHelper.CheckBoxColumnElementStyle>

				<ui:DataGridHelper.TextColumnElementStyle>
					<Style BasedOn="{StaticResource DataGridTextBlockStyle}" TargetType="TextBlock">
						<Setter Property="Padding" Value="5 0" />
						<Setter Property="FontFamily" Value="{Binding DataContext.Font, Source={StaticResource Proxy}}" />
						<Setter Property="FontSize" Value="{Binding DataContext.FontSize, Source={StaticResource Proxy}}" />
						<Setter Property="Foreground" Value="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}" />
					</Style>
				</ui:DataGridHelper.TextColumnElementStyle>

				<DataGrid.Columns>
					<DataGridTextColumn
						Binding="{Binding Ship.ID}"
						FontFamily="{Binding DataContext.Font, Source={StaticResource Proxy}}"
						FontSize="{Binding DataContext.FontSize, Source={StaticResource Proxy}}"
						Foreground="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}"
						Header="ID"
						/>
					<DataGridTextColumn
						Binding="{Binding Ship.MasterShip.ShipTypeName}"
						FontFamily="{Binding DataContext.Font, Source={StaticResource Proxy}}"
						FontSize="{Binding DataContext.FontSize, Source={StaticResource Proxy}}"
						Foreground="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}"
						Header="{Binding DataContext.EventLockPlanner.ShipType, Source={StaticResource Proxy}}"
						/>
					<DataGridTextColumn
						Binding="{Binding Ship.Name}"
						FontFamily="{Binding DataContext.Font, Source={StaticResource Proxy}}"
						FontSize="{Binding DataContext.FontSize, Source={StaticResource Proxy}}"
						Foreground="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}"
						Header="{Binding DataContext.EventLockPlanner.Name, Source={StaticResource Proxy}}"
						/>
					<DataGridTextColumn
						Binding="{Binding Ship.Level}"
						FontFamily="{Binding DataContext.Font, Source={StaticResource Proxy}}"
						FontSize="{Binding DataContext.FontSize, Source={StaticResource Proxy}}"
						Foreground="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}"
						Header="Lv"
						/>
					<DataGridTextColumn
						Binding="{Binding Ship.FirepowerBase}"
						FontFamily="{Binding DataContext.Font, Source={StaticResource Proxy}}"
						FontSize="{Binding DataContext.FontSize, Source={StaticResource Proxy}}"
						Foreground="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}"
						Header="{Binding DataContext.EventLockPlanner.Firepower, Source={StaticResource Proxy}}"
						/>
					<DataGridTextColumn
						Binding="{Binding NightPowerBase}"
						FontFamily="{Binding DataContext.Font, Source={StaticResource Proxy}}"
						FontSize="{Binding DataContext.FontSize, Source={StaticResource Proxy}}"
						Foreground="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}"
						Header="{Binding DataContext.EventLockPlanner.NightBattlePower, Source={StaticResource Proxy}}"
						/>
					<DataGridTextColumn
						Binding="{Binding Ship.ASWBase}"
						FontFamily="{Binding DataContext.Font, Source={StaticResource Proxy}}"
						FontSize="{Binding DataContext.FontSize, Source={StaticResource Proxy}}"
						Foreground="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}"
						Header="{Binding DataContext.EventLockPlanner.ASW, Source={StaticResource Proxy}}"
						/>
					<DataGridTextColumn
						Binding="{Binding Ship.LuckBase}"
						FontFamily="{Binding DataContext.Font, Source={StaticResource Proxy}}"
						FontSize="{Binding DataContext.FontSize, Source={StaticResource Proxy}}"
						Foreground="{Binding DataContext.FontBrush, Source={StaticResource Proxy}}"
						Header="{Binding DataContext.EventLockPlanner.Luck, Source={StaticResource Proxy}}"
						/>
					<DataGridCheckBoxColumn Binding="{Binding CanUseDaihatsu, Mode=OneWay}" Header="{Binding DataContext.EventLockPlanner.Daihatsu, Source={StaticResource Proxy}}" />
					<DataGridCheckBoxColumn Binding="{Binding CanUseTank, Mode=OneWay}" Header="{Binding DataContext.EventLockPlanner.Tank, Source={StaticResource Proxy}}" />
					<DataGridCheckBoxColumn Binding="{Binding IsExpansionSlotAvailable, Mode=OneWay}" Header="{Binding DataContext.EventLockPlanner.Expansion, Source={StaticResource Proxy}}" />
				</DataGrid.Columns>
			</DataGrid>
		</Grid>
	</Grid>
</common:WindowBase>
